package kr.or.ddit.member.controller;

import java.security.Principal;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.enumpkg.ServiceResult;
import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.project.attach.service.AttatchService;
import kr.or.ddit.validate.InsertGroup;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/member")
public class MemberController {
	@Inject
	private MemberService service;
	@Inject
	private AttatchService attService;
	
	@ModelAttribute("member")
	public MemberVO member() {
		return new MemberVO();
	}
	
	// 회원가입 폼
	@GetMapping("/join")
	public String joinMember() {
		return "member/join";
	}
	
	// 이메일 중복 체크
	@PostMapping("/emailCheck")
	@ResponseBody
    public int idcheck(@RequestBody String memEamil) {
        int cnt = 0;
        cnt = service.emailCheck(memEamil);
        return cnt;
    }
	
	// 이메일 인증 등록
	@GetMapping("/registerEmail")
	public String emailConfirm(MemberVO member)throws Exception{
	    service.updateMailAuth(member);
	    return "member/emailAuthSuccess";
	}
	
	@GetMapping("/mypageList")
	public String mypageList() {
		return "pms/mypage/mypageList";
	}
	
	@GetMapping("/mypageDetail")
	public String mypageDetail() {
		return "pms/mypage/mypageDetail";
	}
	
	// 프로필 사진 업로드
	@ResponseBody
	@PostMapping(value = "/imgUpload")
	public int imgUpload(
		@RequestPart("files") MultipartFile[] files
		,MemberVO member2
		,Principal principal
	) {
//		log.info("입력 받은 파일{}",files);
		log.info("입력 받은 파일{}",member2);
		MemberVO member = new MemberVO();
		int memAttNo = attService.createAttatch(files,"profileImg");
		member.setMemEmail(principal.getName());
		member.setMemAttNo(memAttNo);
		log.info("member{}",member);
		int cnt = service.updateMemAttNo(member);
		log.info("cnt{}",cnt);
		return cnt; 
	}
	
	@PostMapping("/memberInsert")
	public String memberInsert(
		HttpServletRequest req 
		, @Validated(InsertGroup.class) @ModelAttribute("member") MemberVO member
		, Errors errors
	) throws Exception{
		
		boolean valid = !errors.hasErrors();
		log.info("{}",valid);
		String viewName = null;
		
		if(true) {
			ServiceResult result = service.createMember(member);
			switch (result) {
			case PKDUPLICATED:
				req.setAttribute("message", "아이디가 중복됩니다.");
				viewName = "member/join";
				break;
			case FAIL:
				req.setAttribute("message", "서버 오류 발생! 다시 시도해 주세요.");
				viewName = "member/join";
				break;

			default:
				viewName = "redirect:/";
				break;
			}
		}else {
			viewName = "member/join";
		}
		return viewName;
	}
	
	@PostMapping("/memberUpdate")
	public void memberUpdate(
			MemberVO member
			,Model model
	) {
		log.info("멤버 : {} ",member);
		ServiceResult result = service.modifyMember(member);
		switch (result) {
		case FAIL:
			model.addAttribute("message", "서버 오류 발생! 다시 시도해 주세요.");
			break;

		default:
			model.addAttribute("message", "수정 성공");
			break;
		}
	}
	
	@ResponseBody
	@GetMapping("/memberDetail")
	public MemberVO memberDetail(
			Principal principal
	) {
		String memEmail = principal.getName();
		MemberVO member = service.retrieveMember(memEmail);
		return member;
	}
	
}
